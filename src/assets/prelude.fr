////////////////////////////////////////
def[
    print_str[.[ptr[# u32] len[# u32]] . .[print_str[make_str[ptr len]]]]

    push_str[.[n[$ u32] dst[& u32]] . .[
        if[==[n 0] .[push_chr[chr[0] dst] ret]]

        var[d u32 1000000000]
        while[>[d n] /=[d 10]]

        while[>[d 0] .[
            push_chr[()[+[chr[0] %[()[/[n d]] 10]]] dst]
            /=[d 10]]]]]

    push_str[.[s[$ str] dst[& u32]] . .[copy_str[s dst] +=[dst sub[1 s]]]]
    push_chr[.[c[$ u32] dst[& u32]] . .[store_u8[c dst] +=[dst 1]]]

    make_str[.[ptr[# u32] len[# u32]] str .[ptr len]]
    copy_str[.[s  [$ str] dst[$ u32]] .   .[mem_copy[sub[0 s] sub[1 s] dst]]]

    mem_copy[.[src[# u32] count[# u32] dst[# u32]] . .[dst src count op_memory_copy[0 0]]]
    store_u8[.[ch [# u32]              dst[# u32]] . .[dst ch op_i32_store8[0 0]]]

    ()[.[a[# u32]] u32 a]
    {}[.[a[# .]] vt_void .[
        .[op_block vt_void
            a
        op_end]]]

    if[.[a[# u32] b[# .]] . .[
        a
        .[op_if vt_void
            b
        op_end]]]

    while[.[a[# u32] b[# .]] . .[
        {}[
            .[op_loop vt_void
                a
                op_i32_eqz
                op_br_if[1]
                    b
                op_br[0]
            op_end]
        ]]]

    floor[.[a[# f32]] f32 .[a op_f32_nearest]]

    + [.[a[# u32] b[# u32]] u32 .[a b op_i32_add  ]]
    - [.[a[# u32] b[# u32]] u32 .[a b op_i32_sub  ]]
    * [.[a[# u32] b[# u32]] u32 .[a b op_i32_mul  ]]
    / [.[a[# u32] b[# u32]] u32 .[a b op_i32_div_u]]
    % [.[a[# u32] b[# u32]] u32 .[a b op_i32_rem_u]]

    ==[.[a[# u32] b[# u32]] u32 .[a b op_i32_eq  ]]
    !=[.[a[# u32] b[# u32]] u32 .[a b op_i32_ne  ]]
    < [.[a[# u32] b[# u32]] u32 .[a b op_i32_lt_u]]
    > [.[a[# u32] b[# u32]] u32 .[a b op_i32_gt_u]]
    <=[.[a[# u32] b[# u32]] u32 .[a b op_i32_le_u]]
    >=[.[a[# u32] b[# u32]] u32 .[a b op_i32_ge_u]]

    - [.[a[# u32]] u32 .[0 a op_i32_sub]]

    +=[.[a[& u32] b[# u32]] . =[a +[a b]]]
    -=[.[a[& u32] b[# u32]] . =[a -[a b]]]
    *=[.[a[& u32] b[# u32]] . =[a *[a b]]]
    /=[.[a[& u32] b[# u32]] . =[a /[a b]]]
    %=[.[a[& u32] b[# u32]] . =[a %[a b]]]

    = [.[a[& u32] b[# u32]] . .[b op_local_set &[a]]]

    as_u32[.[a[# f32]] u32 .[a op_i32_trunc_f32_u]]
    as_i32[.[a[# f32]] u32 .[a op_i32_trunc_f32_s]]
]

// $    -- add var on expansion
// &    -- local reference
// #    -- pass nodes to emit later
// emit -- scope that allows emitting

// alt:
// const[wasm.return    u8 0x0f]
// const[wasm.local.get u8 0x20]
// const[wasm.local.set u8 0x21]
// ...

// Need 'identifier' parameter kind
// def[var[.[name[# id] type[# id] init_value[# u32] disp["var "name": "type" = "value] . .[=[local[name type] value]]]

// No overloading
// +_u32[.[a[# u32] b[# u32]] u32 .[a b op_i32_add]]

// Generics, no overloading
// +[.[t[# type] a[# t] b[# t]] t .[a b op_map[+ t]]]

// need comptime for this
// = [.[t[# type] a[& t] b[# t]] . .[
//     b
//     #for[..[0 size_32_of[type]] .[
//         op_local_set +[&[a] -[-[size 1] i]]]] // we set in reverse order
// ]

// Generics
//  as[.[a[# u32] t[# type]] t .[a]]

// comptime?
// const[x u32 +[1 2]]
// const[y u32 +[x 1]]