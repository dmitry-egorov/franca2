var[x u32 1]
var[y u32 2]
var[z u32 3]
var[w u32 0]
=[w +[z +[x y]]]
=[w +[()[+[4 5]] +[6 7]]]
ret[w]

def[ret disp["return "$[a u32]] void {}[a op_return]]
def[()  disp["("$[expr u32]")"] u32 expr]
def[=   disp[&[a u32]" = "$[b u32]] void {}[b op_local_set &[a]]]

def[+ disp[$[a u32]" + "$[b u32]] u32 {}[a b op_i32_add]]
def[- disp[$[a u32]" - "$[b u32]] u32 {}[a b op_i32_sub]]

def[+= disp[&[a u32]" += "$[b u32]] void =[a +[a b]]]
def[-= disp[&[a u32]" -= "$[b u32]] void =[a -[a b]]]

def[floor disp["floor "$[a f32]] f32 {}[a op_f32_nearest]]

// $ -- add var on expansion
// & -- local reference
// # -- pass nodes to emit later
// wasm -- scope that allows emitting

// alt:
// const[wasm.return    u8 0x0f]
// const[wasm.local.get u8 0x20]
// const[wasm.local.set u8 0x21]
// ...

// def[if   disp["if "  #[a u32] #[b u32]] void wasm[a wasm.if scope[b] wasm.end]]
// def[loop disp["loop "#[b u32]] void wasm[wasm.loop scope[b wasm.br 1] wasm.end]]

//Need 'identifier' parameter kind
// def[var disp["var "id[name]": "id[type]" = " #[value u32]] void =[local[name type] value]]

